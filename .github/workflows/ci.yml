name: CI

on:
  push:
    branches:
      - main
  pull_request: ~

jobs:
  phpcs:
    name: Quality / PHPCS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/local
      - name: Run
        run: ./vendor/bin/phpcs

  phpmd:
    name: Quality / PHPMD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/local
      - name: Run
        run: ./vendor/bin/phpmd src,tests text ruleset.xml

  psalm:
    name: Quality / Psalm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/local
      - name: Run
        run: ./vendor/bin/psalm --output-format=github

  phpstan:
    name: Tests / PHPStan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/local
      - name: Initialize
        run: |
          ./vendor/bin/phpstan clear-result-cache
      - name: Run
        run: |
          ./vendor/bin/phpstan analyse --memory-limit=-1

  phpunit:
    name: Tests / PHPUnit
    runs-on: ubuntu-latest
    needs: [phpcs, phpmd, psalm, phpstan]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/docker-compose
      - name: Run Api
        run: |
          docker compose exec -T php php vendor/bin/phpunit tests/Api/
      - name: Run Web
        run: |
          docker compose exec -T php php vendor/bin/phpunit tests/Web/

  integration:
    name: Integration / Newman
    runs-on: ubuntu-latest
    needs: [phpcs, phpmd, psalm, phpstan]
    env:
      APP_ENV: int
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/docker-compose
      - name: Copy .env file
        shell: bash
        run: cp .env.int .env
      - name: Initialize
        run: |
          docker compose exec -T php php bin/console doctrine:database:create --if-not-exists
          docker compose exec -T php php bin/console doctrine:migrations:migrate --no-interaction
          docker compose exec -T php php bin/console app:update:labels
          docker compose exec -T php php bin/console app:update:games_and_dex
          docker compose exec -T php php bin/console app:update:pokemons
          docker compose exec -T php php bin/console app:update:regional_dex_numbers
          docker compose exec -T php php bin/console app:update:games_availabilities
          docker compose exec -T php php bin/console app:update:games_shinies_availabilities
          docker compose exec -T php php bin/console app:calculate:game_bundles_availabilities
          docker compose exec -T php php bin/console app:calculate:game_bundles_shinies_availabilities
          docker compose exec -T php php bin/console app:calculate:dex_availabilities
          docker compose exec -T php php bin/console app:calculate:pokemon_availabilities
      - name: Debug
        run: |
          docker compose exec php curl -I http://web:douze@apache/api/album/7b52009b64fd0a2a49e6d8a939753077792b0554/ultrasunultramoon
          docker compose exec php curl http://web:douze@apache/api/album/7b52009b64fd0a2a49e6d8a939753077792b0554/ultrasunultramoon
      - name: Run
        run: |
          docker run --rm --name pokenini-newman \
            --network=pokenini_default \
            -v ./tests/Api/Integration:/etc/newman \
            -t postman/newman:alpine run collection.json

  measures:
    name: Measures
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/docker-compose
      - name: Run Coverage
        run: | 
          docker compose exec \
            -e XDEBUG_MODE=coverage \
            -T php php vendor/bin/phpunit \
            --exclude-group="browser-testing" \
            --coverage-clover=coverage.xml \
            --coverage-xml=build/coverage/coverage-xml \
            --log-junit=build/coverage/junit.xml
      - name: Run Infection Api
        run: | 
          docker compose exec -T php php vendor/bin/infection \
            --coverage=build/coverage \
            --min-msi=100 --min-covered-msi=100 \
            --show-mutations \
            --filter=src/Api
      - name: Run Infection Web
        run: | 
          docker compose exec -T php php vendor/bin/infection \
            --coverage=build/coverage \
            --min-msi=100 --min-covered-msi=100 \
            --show-mutations \
            --filter=src/Web