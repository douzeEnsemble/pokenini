name: CI

on:
  push:
    branches:
      - main
  pull_request: ~

jobs:
  phpcs:
    name: Quality / PHPCS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/local
      - name: Run
        run: ./vendor/bin/phpcs

  phpmd:
    name: Quality / PHPMD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/local
      - name: Run
        run: ./vendor/bin/phpmd src,tests text ruleset.xml

  psalm:
    name: Quality / Psalm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/local
      - name: Run
        run: ./vendor/bin/psalm --output-format=github

  phpstan:
    name: Tests / PHPStan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/local
      - name: Run
        run: |
          ./vendor/bin/phpstan clear-result-cache
          ./vendor/bin/phpstan analyse --memory-limit=-1

  phpunit:
    name: Tests / PHPUnit
    runs-on: ubuntu-latest
    needs: [phpcs, phpmd, psalm, phpstan]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/docker-compose
      - name: Run
        run: |
          docker compose exec -T php php bin/phpunit tests/Api/
          docker compose exec -T php php bin/phpunit tests/Web/

  integration:
    name: Integration / Newman
    runs-on: ubuntu-latest
    needs: [phpcs, phpmd, psalm, phpstan]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/docker-compose
      - name: Initialize
        run: |
          docker compose exec -T php php bin/console --env=int doctrine:database:create --if-not-exists
          docker compose exec -T php php bin/console --env=int doctrine:migrations:migrate --no-interaction
          docker compose exec -T php php bin/console --env=int app:update:labels
          docker compose exec -T php php bin/console --env=int app:update:games_and_dex
          docker compose exec -T php php bin/console --env=int app:update:pokemons
          docker compose exec -T php php bin/console --env=int app:update:regional_dex_numbers
          docker compose exec -T php php bin/console --env=int app:update:games_availabilities
          docker compose exec -T php php bin/console --env=int app:update:games_shinies_availabilities
          docker compose exec -T php php bin/console --env=int app:calculate:game_bundles_availabilities
          docker compose exec -T php php bin/console --env=int app:calculate:game_bundles_shinies_availabilities
          docker compose exec -T php php bin/console --env=int app:calculate:dex_availabilities
          docker compose exec -T php php bin/console --env=int app:calculate:pokemon_availabilities
          docker run --network=pokenini-api_default -v ./tests/Api/Integration:/etc/newman -t postman/newman:alpine run collection.json
      - name: Run
        run: docker compose exec -T php php bin/phpunit

  coverage:
    name: Measures / Coverage / Api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        uses: ./.github/actions/docker-compose
      - name: Run
        run: | 
          docker compose exec \
            -e XDEBUG_MODE=coverage \
            -T php php bin/phpunit tests/Api/ \
            --coverage-clover=coverage.xml \
            --coverage-xml=build/coverage/coverage-xml \
            --log-junit=build/coverage/junit.xml
      - name: Coverage Test
        run: docker compose exec -T php php tests/tools/coverage.php coverage.xml 100 true
      - name: Update coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: build/coverage/

  mutation:
    name: Measures / Mutation
    runs-on: ubuntu-latest
    needs: [coverage]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage api
          path: build/coverage/
      - name: Prepare
        uses: ./.github/actions/docker-compose
      - name: Run
        run: |
          docker compose exec -T php ls -laR /var/www/html
          docker compose exec -T php php vendor/bin/infection \
            --coverage=build/coverage \
            --min-msi=100 --min-covered-msi=100 \
            --show-mutations \
            --filter=src/Api
          docker compose exec -T php php vendor/bin/infection \
            --coverage=build/coverage \
            --min-msi=100 --min-covered-msi=100 \
            --show-mutations \
            --filter=src/Web